const std = @import("std");
const commands = @import("commands.zig");
const types = @import("../common/types.zig");

pub fn executeCommand(allocator: std.mem.Allocator, args: commands.CliArgs) !void {
    switch (args.command) {
        .init => try initProject(allocator),
        .add => try addPackage(allocator, args.package_name orelse return commands.CliError.MissingArgument, args.version),
        .update => try updatePackages(allocator),
        .build => try buildProject(allocator),
        .publish => try publishPackage(allocator),
        .login => try loginToRegistry(allocator, args.registry_url),
        .help => commands.printHelp(),
    }
}

fn initProject(_: std.mem.Allocator) !void {
    std.debug.print("🚀 Initializing new Zepplin project...\n", .{});

    // Create zepplin.toml
    const toml_content =
        \\[package]
        \\name = "zepplin"
        \\version = "0.1.0"
        \\description = "Zepplin self hosted zig packages & libraries!"
        \\author = "Christopher Kelley"
        \\license = "MIT"
        \\[dependencies]
        \\# Add your dependencies here
        \\# example = "1.0.0"
        \\
        \\[registries]
        \\default = "https://registry.zepplin.dev"
        \\
    ;

    const file = std.fs.cwd().createFile("zepplin.toml", .{}) catch |err| switch (err) {
        error.PathAlreadyExists => {
            std.debug.print("❌ zepplin.toml already exists\n", .{});
            return;
        },
        else => return err,
    };
    defer file.close();

    try file.writeAll(toml_content);

    // Create zepplin.lock
    const lock_content =
        \\# This file is automatically generated by Zepplin
        \\# Do not edit manually
        \\
        \\[metadata]
        \\version = 1
        \\
        \\[packages]
        \\# Package lock information will be stored here
        \\
    ;

    const lock_file = try std.fs.cwd().createFile("zepplin.lock", .{});
    defer lock_file.close();
    try lock_file.writeAll(lock_content);

    std.debug.print("✅ Created zepplin.toml and zepplin.lock\n", .{});
    std.debug.print("📦 Project initialized successfully!\n", .{});
}

fn addPackage(_: std.mem.Allocator, package_name: []const u8, version: ?[]const u8) !void {
    std.debug.print("📦 Adding package: {s}", .{package_name});
    if (version) |v| {
        std.debug.print("@{s}", .{v});
    }
    std.debug.print("\n", .{});

    // TODO: Implement actual package resolution and addition
    std.debug.print("🔍 Resolving dependencies...\n", .{});
    std.debug.print("📥 Downloading package...\n", .{});
    std.debug.print("✅ Package added successfully!\n", .{});
}

fn updatePackages(_: std.mem.Allocator) !void {
    std.debug.print("🔄 Updating all packages...\n", .{});
    std.debug.print("✅ All packages updated!\n", .{});
}

fn buildProject(allocator: std.mem.Allocator) !void {
    std.debug.print("🔨 Building project with dependencies...\n", .{});

    // Run zig build
    var child = std.process.Child.init(&.{ "zig", "build" }, allocator);
    const result = try child.spawnAndWait();

    switch (result) {
        .Exited => |code| {
            if (code == 0) {
                std.debug.print("✅ Build successful!\n", .{});
            } else {
                std.debug.print("❌ Build failed with exit code: {}\n", .{code});
            }
        },
        else => std.debug.print("❌ Build process terminated unexpectedly\n", .{}),
    }
}

fn publishPackage(_: std.mem.Allocator) !void {
    std.debug.print("📤 Publishing package to registry...\n", .{});
    std.debug.print("🔐 Authenticating...\n", .{});
    std.debug.print("📦 Packaging files...\n", .{});
    std.debug.print("⬆️  Uploading...\n", .{});
    std.debug.print("✅ Package published successfully!\n", .{});
}

fn loginToRegistry(_: std.mem.Allocator, registry_url: ?[]const u8) !void {
    const url = registry_url orelse "https://registry.zepplin.dev";
    std.debug.print("🔐 Logging in to registry: {s}\n", .{url});

    // TODO: Implement actual authentication
    std.debug.print("Please enter your credentials:\n", .{});
    std.debug.print("✅ Login successful!\n", .{});
}
